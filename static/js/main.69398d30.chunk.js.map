{"version":3,"sources":["utils/getWeb3.js","App.js","registerServiceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","web3","currentProvider","enable","Web3","console","log","provider","providers","HttpProvider","App","state","signed","accounts","contract","isLoading","componentDidMount","_callee","Contract","instance","initialResponse","regenerator_default","a","wrap","_context","prev","next","sent","eth","getAccounts","truffleContract","WorkshopRegisterContract","setProvider","deployed","checkRegister","_this","setState","undefined","t0","stop","this","runExample","_callee2","_this$state","response","_context2","signRegister","from","react_default","createElement","className","Jumbotron","Button","bsStyle","disabled","onClick","Image","src","style","color","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.69398d30.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", () => {\n      let web3 = window.web3;\n\n      // Checking if Web3 has been injected by the browser (Mist/MetaMask).\n      const alreadyInjected = typeof web3 !== \"undefined\";\n\n      if (alreadyInjected) {\n        // Use Mist/MetaMask's provider.\n        web3.currentProvider.enable();\n        web3 = new Web3(web3.currentProvider);\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } else {\n        // Fallback to localhost if no web3 injection. We've configured this to\n        // use the development console's port by default.\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport { Jumbotron, Button, Image } from 'react-bootstrap';\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\n\nimport WorkshopRegisterContract from \"./contracts/WorkshopRegister.json\"; // Use local contract ABI\n// import contractABI from \"./WorkshopRemix.js\" // Use Remix compiled ABI\n\nimport \"./App.css\";\n\nclass App extends Component {\n  // signed state stores if the current user has signed the contract\n  // isLoading disables the button when querying the contract\n  state = { signed: false, web3: null, accounts: null, contract: null, isLoading: false };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Remix Deployment to Ropsten\n      // Ropsten deployment: 0xe796a950fb501d8341d2c5209ac3b0cad21e1fa6\n      // var instance = new web3.eth.Contract(contractABI, \"0xe796a950fb501d8341d2c5209ac3b0cad21e1fa6\");\n\n      // Metamask deployment\n      const Contract = truffleContract(WorkshopRegisterContract);\n      Contract.setProvider(web3.currentProvider);\n      const instance = await Contract.deployed();\n\n      let initialResponse = await instance.checkRegister(accounts[0]);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3: web3!==undefined, accounts: accounts, contract: instance, signed: initialResponse });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.log(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    this.setState({ isLoading: true });\n\n    // Sign the register\n    await contract.signRegister({ from: accounts[0] });\n    // Check you signed the register to prove it worked.\n    let response = await contract.checkRegister(accounts[0]);\n    console.log(response);\n\n    // Update state with the result.\n    this.setState({\n      signed: response,\n      isLoading: false\n    })\n  };\n\n  // The front end\n  render() {\n    const { isLoading } = this.state;\n\n    return (\n      <div className=\"App\">\n\n        <Jumbotron>\n          <h1>Sign the Decentralized Register</h1>\n          <p>\n            Congratulations! You've launched a DApp. Now go and make this much better! And don't forget to sign the register:\n          </p>\n          <p>\n            <Button\n              bsStyle=\"primary\"\n              disabled={isLoading}\n              onClick={!isLoading ? this.runExample : null}\n            >\n              {isLoading ? 'Loading...' : 'Sign Now'}\n            </Button>\n          </p>\n        </Jumbotron>\n        <div>\n          {this.state.signed ? (\n            <div>\n              <p>\n                <strong>Vitalik thanks you for signing!</strong>\n              </p>\n              <Image src=\"https://beta.techcrunch.com/wp-content/uploads/2017/09/unnamed.gif\" />\n            </div>\n          ) : (\n            <div>\n              <p>\n                You haven't signed the register yet!\n              </p>\n              {!this.state.web3 &&\n                <p style={{color: 'red'}}>Loading Web3, accounts, and contract. Make sure Metamask is unlocked and connected to the Ganache network.</p>\n              }\n            </div>\n          )}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}